#include <opencv2/core.hpp>
#include <opencv2/videoio.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgproc.hpp>  // cv::Canny()
#include <iostream>
#include <vector>

using namespace cv;
using std::cout; using std::cerr; using std::endl; using std::vector;
using namespace std;
//Assigns cameras to variables

bool pause = false;
VideoCapture capture1(0);
VideoCapture capture2(1);
VideoCapture capture3(2);
VideoCapture capture4(3);
VideoCapture capture5(4);
VideoCapture capture6(5);
Mat blueFrame;
Mat frame1;
Mat frame2;
Mat frame3;
Mat frame4;
Mat frame5;
Mat frame6;
Mat top;
Mat bot;
std::vector<Mat> matArray1;
std::vector<Mat> matArray2;
Mat3b finalFrame;
//Creates the frame to hold the feed
double frameRatio = 0.6;

void stopStream()
{
	pause = true;
}

int camCount() {
	int numCams = 0;
	double frameRatio = 0.6;
	cout << "checking for cams" << endl;

	for (int i = 0; i < 7; ++i) {
		VideoCapture capture0(i);
		if (capture0.isOpened()) {
			numCams++;
		}
	}
	return numCams;
}

void displayCams(int numCams) {
	pause = false;
	blueFrame = imread("Bb_blue.jpg", IMREAD_COLOR);
	while (!pause)
	{
		//Mat3b finalFrame;
		switch (numCams) {
		case 0: cout << "no cams detected" << endl;
			exit(0);
			break;
		case 1: {
			capture1 >> frame1;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(blueFrame, blueFrame, Size(frame1.cols, frame1.rows), 0, 0);
			frame2 = blueFrame;
			frame3 = blueFrame;
			frame4 = blueFrame;
			frame5 = blueFrame;
			frame6 = blueFrame;
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		case 2: {
			capture1 >> frame1;
			capture2 >> frame2;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(blueFrame, blueFrame, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame2, frame2, Size(frame1.cols, frame1.rows), 0, 0);
			frame3 = blueFrame;
			frame4 = blueFrame;
			frame5 = blueFrame;
			frame6 = blueFrame;
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		case 3: {
			capture1 >> frame1;
			capture2 >> frame2;
			capture3 >> frame3;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(blueFrame, blueFrame, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame2, frame2, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame3, frame3, Size(frame1.cols, frame1.rows), 0, 0);
			frame4 = blueFrame;
			frame5 = blueFrame;
			frame6 = blueFrame;
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		case 4: {
			capture1 >> frame1;
			capture2 >> frame2;
			capture3 >> frame3;
			capture4 >> frame4;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(blueFrame, blueFrame, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame2, frame2, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame3, frame3, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame4, frame4, Size(frame1.cols, frame1.rows), 0, 0);
			frame5 = blueFrame;
			frame6 = blueFrame;
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		case 5: {
			capture1 >> frame1;
			capture2 >> frame2;
			capture3 >> frame3;
			capture4 >> frame4;
			capture5 >> frame5;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(blueFrame, blueFrame, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame2, frame2, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame3, frame3, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame4, frame4, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame5, frame5, Size(frame1.cols, frame1.rows), 0, 0);
			frame6 = blueFrame;
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		case 6: {
			capture1 >> frame1;
			capture2 >> frame2;
			capture3 >> frame3;
			capture4 >> frame4;
			capture5 >> frame5;
			capture6 >> frame6;
			resize(frame1, frame1, Size(), frameRatio, frameRatio);
			resize(frame2, frame2, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame3, frame3, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame4, frame4, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame5, frame5, Size(frame1.cols, frame1.rows), 0, 0);
			resize(frame6, frame6, Size(frame1.cols, frame1.rows), 0, 0);
			matArray1 = { frame1, frame2, frame3 };
			matArray2 = { frame4, frame5, frame6 };
			hconcat(matArray1, top);
			hconcat(matArray2, bot);
			vconcat(top, bot, finalFrame);
			//namedWindow("cam1", WINDOW_AUTOSIZE);
			imshow("Camera Feed", finalFrame);
			break;
		}
		}
		char keypress = waitKey(1);
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}

}
//cam0 - cam5 methods for displaying individual camera feeds. This can be used later for camera selection GUI

void cam1() {
	pause = false;
	while (!pause) {
		if (capture1.isOpened()) { //avoid reading from an unopened device
			capture1.read(frame1); //Reads frame
			imshow("Camera Feed", frame1); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			pause = true;
			break;
		}
	}
}
void cam2() {
	pause = false;
	while (!pause) {
		if (capture2.isOpened()) { //avoid reading from an unopened device
			capture2.read(frame2); //Reads frame
			imshow("Camera Feed", frame2); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}
}
void cam3() {
	pause = false;
	while (!pause) {
		if (capture3.isOpened()) { //avoid reading from an unopened device
			capture3.read(frame3); //Reads frame
			imshow("Camera Feed", frame3); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}
}
void cam4() {
	pause = false;
	while (!pause) {
		if (capture4.isOpened()) { //avoid reading from an unopened device
			capture4.read(frame4); //Reads frame
			imshow("Camera Feed", frame4); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}
}
void cam5() {
	pause = false;
	while (!pause) {
		if (capture5.isOpened()) { //avoid reading from an unopened device
			capture5.read(frame5); //Reads frame
			imshow("Camera Feed", frame5); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}

}
void cam6() {
	pause = false;
	while (!pause) {
		if (capture6.isOpened()) { //avoid reading from an unopened device
			capture6.read(frame6); //Reads frame
			imshow("Camera Feed", frame6); //Display Frame
		}
		else {
			break; // If no camera, breaks from method
		}
		int keypress = waitKey(1); //saving the pressed key
		if (keypress == 27) {//if pressed Esc key breaks from method
			pause = false;
			break;
		}
		if (keypress == 32) {//if Spacebar
			stopStream();
		}
	}
}

int main(int, char**)
{
	int numCams = camCount();
	cout << "Open Cams = " << numCams << endl;
	//Instructions
	cout << "Once opened, press ESC to scroll through cameras" << endl;
	//Endlessly scroll through loop using ESC
	while (true) {
		if (capture1.isOpened()) {
			cam1();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam1();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		if (capture2.isOpened()) {
			cam2();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam2();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		if (capture3.isOpened()) {
			cam3();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam3();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		if (capture4.isOpened()) {
			cam4();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam4();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		if (capture5.isOpened()) {
			cam5();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam5();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		if (capture6.isOpened()) {
			cam6();
			while (true) {
				char key = waitKey(1);
				switch (key) {
				case 32: {
					if (pause == true)
						cam6();
					else
						break;
				}
				}
				if (pause == false) {
					break;
				}
			}
		}
		displayCams(numCams);
		while (true) {
			char key = waitKey(1);
			switch (key) {
			case 32: {
				if (pause == true)
					displayCams(numCams);
				else
					break;
			}
			}
			if (pause == false) {
				break;
			}
		}
	}
	return 0;
}
